{
  "google_workspace_apis": {
    "metadata": {
      "source": "Google Workspace for Developers",
      "url": "https://developers.google.com/workspace/explore?filter=",
      "last_updated": "2025-10-13",
      "description": "Comprehensive list of Google Workspace APIs with authentication, scopes, and code examples",
      "total_apis": 11,
      "categories": [
        "Email & Communication",
        "Cloud Storage",
        "Productivity & Collaboration",
        "Calendar & Scheduling",
        "Forms & Data Collection",
        "Organization & Management"
      ]
    },
    "apis": [
      {
        "name": "Gmail API",
        "service": "gmail",
        "description": "Access Gmail mailboxes and send mail. Read, send, delete, and manage emails programmatically.",
        "authentication": {
          "method": "OAuth 2.0",
          "scopes": [
            "https://www.googleapis.com/auth/gmail.readonly",
            "https://www.googleapis.com/auth/gmail.modify",
            "https://www.googleapis.com/auth/gmail.compose",
            "https://www.googleapis.com/auth/gmail.send"
          ],
          "notes": "Requires user consent for email access. Use minimal scopes necessary."
        },
        "common_use_cases": [
          "Email automation and filtering",
          "Smart email organization",
          "Email tracking and analytics",
          "Automated email responses",
          "Email backup and archiving"
        ],
        "code_example": {
          "description": "List and read recent emails",
          "code": "// Authenticate and list recent emails\ngapi.client.gmail.users.messages.list({\n  'userId': 'me',\n  'maxResults': 10\n}).then(response => {\n  const messages = response.result.messages;\n  messages.forEach(message => {\n    // Get full message details\n    gapi.client.gmail.users.messages.get({\n      'userId': 'me',\n      'id': message.id\n    }).then(msg => {\n      console.log('Subject:', msg.result.payload.headers.find(h => h.name === 'Subject').value);\n    });\n  });\n});\n\n// Send an email\nconst email = [\n  'To: recipient@example.com',\n  'Subject: Hello from Extension',\n  '',\n  'This is the email body.'\n].join('\\n');\n\nconst encodedEmail = btoa(email).replace(/\\+/g, '-').replace(/\\//g, '_');\ngapi.client.gmail.users.messages.send({\n  'userId': 'me',\n  'resource': {\n    'raw': encodedEmail\n  }\n});"
        },
        "key_methods": [
          "users.messages.list",
          "users.messages.get",
          "users.messages.send",
          "users.messages.modify",
          "users.messages.delete",
          "users.labels.list",
          "users.threads.list"
        ]
      },
      {
        "name": "Google Drive API",
        "service": "drive",
        "description": "Store and access files in Google Drive. Create, read, update, and delete files and folders.",
        "authentication": {
          "method": "OAuth 2.0",
          "scopes": [
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive.readonly",
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.appdata"
          ],
          "notes": "drive.file scope only accesses files created by the app. Use drive scope for full access."
        },
        "common_use_cases": [
          "File backup and sync",
          "Document organization",
          "Collaborative file sharing",
          "Automated file processing",
          "Cloud storage integration"
        ],
        "code_example": {
          "description": "List files and upload new file",
          "code": "// List files in Drive\ngapi.client.drive.files.list({\n  'pageSize': 10,\n  'fields': 'files(id, name, mimeType, modifiedTime)'\n}).then(response => {\n  const files = response.result.files;\n  files.forEach(file => {\n    console.log(`${file.name} (${file.id})`);\n  });\n});\n\n// Upload a file\nconst metadata = {\n  name: 'my-document.txt',\n  mimeType: 'text/plain'\n};\n\nconst fileContent = 'Hello, World!';\nconst file = new Blob([fileContent], {type: 'text/plain'});\n\nconst form = new FormData();\nform.append('metadata', new Blob([JSON.stringify(metadata)], {type: 'application/json'}));\nform.append('file', file);\n\nfetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {\n  method: 'POST',\n  headers: new Headers({'Authorization': 'Bearer ' + accessToken}),\n  body: form\n}).then(response => response.json())\n  .then(data => console.log('File created:', data.id));"
        },
        "key_methods": [
          "files.list",
          "files.get",
          "files.create",
          "files.update",
          "files.delete",
          "files.copy",
          "permissions.create"
        ]
      },
      {
        "name": "Google Calendar API",
        "service": "calendar",
        "description": "Manage calendars and events. Create, read, update, and delete calendar events.",
        "authentication": {
          "method": "OAuth 2.0",
          "scopes": [
            "https://www.googleapis.com/auth/calendar.readonly",
            "https://www.googleapis.com/auth/calendar.events",
            "https://www.googleapis.com/auth/calendar"
          ],
          "notes": "Events scope allows creating/modifying events. Full scope includes calendar management."
        },
        "common_use_cases": [
          "Meeting scheduler",
          "Event reminders",
          "Calendar sync",
          "Automated event creation",
          "Availability checking"
        ],
        "code_example": {
          "description": "List upcoming events and create new event",
          "code": "// List upcoming events\ngapi.client.calendar.events.list({\n  'calendarId': 'primary',\n  'timeMin': (new Date()).toISOString(),\n  'maxResults': 10,\n  'singleEvents': true,\n  'orderBy': 'startTime'\n}).then(response => {\n  const events = response.result.items;\n  events.forEach(event => {\n    const start = event.start.dateTime || event.start.date;\n    console.log(`${event.summary} - ${start}`);\n  });\n});\n\n// Create a new event\nconst event = {\n  'summary': 'Team Meeting',\n  'location': 'Conference Room A',\n  'description': 'Weekly team sync',\n  'start': {\n    'dateTime': '2025-10-15T10:00:00-07:00',\n    'timeZone': 'America/Los_Angeles'\n  },\n  'end': {\n    'dateTime': '2025-10-15T11:00:00-07:00',\n    'timeZone': 'America/Los_Angeles'\n  },\n  'attendees': [\n    {'email': 'colleague@example.com'}\n  ],\n  'reminders': {\n    'useDefault': false,\n    'overrides': [\n      {'method': 'email', 'minutes': 24 * 60},\n      {'method': 'popup', 'minutes': 10}\n    ]\n  }\n};\n\ngapi.client.calendar.events.insert({\n  'calendarId': 'primary',\n  'resource': event\n}).then(event => {\n  console.log('Event created:', event.result.htmlLink);\n});"
        },
        "key_methods": [
          "events.list",
          "events.get",
          "events.insert",
          "events.update",
          "events.delete",
          "calendars.list",
          "freebusy.query"
        ]
      },
      {
        "name": "Google Docs API",
        "service": "docs",
        "description": "Read and write Google Docs documents. Create, edit, and format documents programmatically.",
        "authentication": {
          "method": "OAuth 2.0",
          "scopes": [
            "https://www.googleapis.com/auth/documents.readonly",
            "https://www.googleapis.com/auth/documents"
          ],
          "notes": "Full scope required for creating and editing documents."
        },
        "common_use_cases": [
          "Document automation",
          "Template generation",
          "Content extraction",
          "Batch document updates",
          "Report generation"
        ],
        "code_example": {
          "description": "Create document and add content",
          "code": "// Create a new document\ngapi.client.docs.documents.create({\n  'resource': {\n    'title': 'My New Document'\n  }\n}).then(response => {\n  const documentId = response.result.documentId;\n  console.log('Created document:', documentId);\n  \n  // Insert text into the document\n  const requests = [\n    {\n      insertText: {\n        location: {\n          index: 1\n        },\n        text: 'Hello, this is my document content!\\n'\n      }\n    },\n    {\n      updateParagraphStyle: {\n        range: {\n          startIndex: 1,\n          endIndex: 40\n        },\n        paragraphStyle: {\n          namedStyleType: 'HEADING_1'\n        },\n        fields: 'namedStyleType'\n      }\n    }\n  ];\n  \n  return gapi.client.docs.documents.batchUpdate({\n    'documentId': documentId,\n    'resource': {\n      'requests': requests\n    }\n  });\n});\n\n// Read document content\ngapi.client.docs.documents.get({\n  'documentId': documentId\n}).then(response => {\n  const doc = response.result;\n  console.log('Document title:', doc.title);\n  console.log('Content:', doc.body.content);\n});"
        },
        "key_methods": [
          "documents.create",
          "documents.get",
          "documents.batchUpdate"
        ]
      },
      {
        "name": "Google Sheets API",
        "service": "sheets",
        "description": "Read and write Google Sheets spreadsheets. Manage cells, rows, columns, and perform calculations.",
        "authentication": {
          "method": "OAuth 2.0",
          "scopes": [
            "https://www.googleapis.com/auth/spreadsheets.readonly",
            "https://www.googleapis.com/auth/spreadsheets"
          ],
          "notes": "Full scope required for creating and editing spreadsheets."
        },
        "common_use_cases": [
          "Data logging and tracking",
          "Report generation",
          "Data analysis",
          "Automated data entry",
          "Dashboard creation"
        ],
        "code_example": {
          "description": "Read and write spreadsheet data",
          "code": "// Read values from a spreadsheet\ngapi.client.sheets.spreadsheets.values.get({\n  'spreadsheetId': spreadsheetId,\n  'range': 'Sheet1!A1:D10'\n}).then(response => {\n  const values = response.result.values;\n  values.forEach(row => {\n    console.log(row.join(', '));\n  });\n});\n\n// Write values to a spreadsheet\nconst values = [\n  ['Name', 'Age', 'Email'],\n  ['John Doe', 30, 'john@example.com'],\n  ['Jane Smith', 25, 'jane@example.com']\n];\n\ngapi.client.sheets.spreadsheets.values.update({\n  'spreadsheetId': spreadsheetId,\n  'range': 'Sheet1!A1:C3',\n  'valueInputOption': 'RAW',\n  'resource': {\n    'values': values\n  }\n}).then(response => {\n  console.log('Updated cells:', response.result.updatedCells);\n});\n\n// Create a new spreadsheet\ngapi.client.sheets.spreadsheets.create({\n  'resource': {\n    'properties': {\n      'title': 'My Data Sheet'\n    },\n    'sheets': [\n      {\n        'properties': {\n          'title': 'Data',\n          'gridProperties': {\n            'rowCount': 100,\n            'columnCount': 10\n          }\n        }\n      }\n    ]\n  }\n}).then(response => {\n  console.log('Created spreadsheet:', response.result.spreadsheetId);\n});"
        },
        "key_methods": [
          "spreadsheets.create",
          "spreadsheets.get",
          "spreadsheets.values.get",
          "spreadsheets.values.update",
          "spreadsheets.values.append",
          "spreadsheets.batchUpdate"
        ]
      },
      {
        "name": "Google Forms API",
        "service": "forms",
        "description": "Create and manage Google Forms. Build forms, collect responses, and analyze results.",
        "authentication": {
          "method": "OAuth 2.0",
          "scopes": [
            "https://www.googleapis.com/auth/forms.body.readonly",
            "https://www.googleapis.com/auth/forms.body",
            "https://www.googleapis.com/auth/forms.responses.readonly"
          ],
          "notes": "Body scope for creating/editing forms, responses scope for reading submissions."
        },
        "common_use_cases": [
          "Survey creation",
          "Data collection",
          "Feedback forms",
          "Registration forms",
          "Quiz generation"
        ],
        "code_example": {
          "description": "Create form and read responses",
          "code": "// Create a new form\nconst form = {\n  info: {\n    title: 'Customer Feedback Survey',\n    documentTitle: 'Feedback Form'\n  }\n};\n\ngapi.client.forms.forms.create({\n  resource: form\n}).then(response => {\n  const formId = response.result.formId;\n  console.log('Form created:', formId);\n  \n  // Add questions to the form\n  const updates = {\n    requests: [\n      {\n        createItem: {\n          item: {\n            title: 'How satisfied are you?',\n            questionItem: {\n              question: {\n                required: true,\n                choiceQuestion: {\n                  type: 'RADIO',\n                  options: [\n                    {value: 'Very Satisfied'},\n                    {value: 'Satisfied'},\n                    {value: 'Neutral'},\n                    {value: 'Dissatisfied'}\n                  ]\n                }\n              }\n            }\n          },\n          location: {index: 0}\n        }\n      }\n    ]\n  };\n  \n  return gapi.client.forms.forms.batchUpdate({\n    formId: formId,\n    resource: updates\n  });\n});\n\n// Get form responses\ngapi.client.forms.forms.responses.list({\n  formId: formId\n}).then(response => {\n  const responses = response.result.responses;\n  responses.forEach(r => {\n    console.log('Response:', r.answers);\n  });\n});"
        },
        "key_methods": [
          "forms.create",
          "forms.get",
          "forms.batchUpdate",
          "forms.responses.list",
          "forms.responses.get"
        ]
      },
      {
        "name": "Google Slides API",
        "service": "slides",
        "description": "Create and modify Google Slides presentations. Add slides, text, images, and shapes.",
        "authentication": {
          "method": "OAuth 2.0",
          "scopes": [
            "https://www.googleapis.com/auth/presentations.readonly",
            "https://www.googleapis.com/auth/presentations"
          ],
          "notes": "Full scope required for creating and editing presentations."
        },
        "common_use_cases": [
          "Presentation automation",
          "Report generation",
          "Slide templates",
          "Batch updates",
          "Data visualization"
        ],
        "code_example": {
          "description": "Create presentation and add content",
          "code": "// Create a new presentation\ngapi.client.slides.presentations.create({\n  resource: {\n    title: 'Sales Report Q4 2025'\n  }\n}).then(response => {\n  const presentationId = response.result.presentationId;\n  console.log('Created presentation:', presentationId);\n  \n  // Add a slide with text\n  const requests = [\n    {\n      createSlide: {\n        slideLayoutReference: {\n          predefinedLayout: 'TITLE_AND_BODY'\n        }\n      }\n    },\n    {\n      insertText: {\n        objectId: slideId,\n        text: 'Q4 Sales Performance',\n        insertionIndex: 0\n      }\n    }\n  ];\n  \n  return gapi.client.slides.presentations.batchUpdate({\n    presentationId: presentationId,\n    resource: {requests: requests}\n  });\n});\n\n// Read presentation content\ngapi.client.slides.presentations.get({\n  presentationId: presentationId\n}).then(response => {\n  const slides = response.result.slides;\n  console.log('Slide count:', slides.length);\n});"
        },
        "key_methods": [
          "presentations.create",
          "presentations.get",
          "presentations.batchUpdate",
          "presentations.pages.get"
        ]
      },
      {
        "name": "Google Tasks API",
        "service": "tasks",
        "description": "Manage Google Tasks. Create, update, and organize tasks and task lists.",
        "authentication": {
          "method": "OAuth 2.0",
          "scopes": [
            "https://www.googleapis.com/auth/tasks.readonly",
            "https://www.googleapis.com/auth/tasks"
          ],
          "notes": "Full scope required for creating and updating tasks."
        },
        "common_use_cases": [
          "Task management",
          "To-do lists",
          "Project tracking",
          "Reminders",
          "Workflow automation"
        ],
        "code_example": {
          "description": "List and create tasks",
          "code": "// List task lists\ngapi.client.tasks.tasklists.list().then(response => {\n  const lists = response.result.items;\n  lists.forEach(list => {\n    console.log('Task list:', list.title);\n  });\n});\n\n// List tasks from a list\ngapi.client.tasks.tasks.list({\n  tasklist: taskListId\n}).then(response => {\n  const tasks = response.result.items;\n  tasks.forEach(task => {\n    console.log(`${task.title} - ${task.status}`);\n  });\n});\n\n// Create a new task\nconst task = {\n  title: 'Complete project report',\n  notes: 'Finalize Q4 analysis',\n  due: '2025-10-20T12:00:00.000Z'\n};\n\ngapi.client.tasks.tasks.insert({\n  tasklist: taskListId,\n  resource: task\n}).then(response => {\n  console.log('Task created:', response.result.id);\n});\n\n// Update task status\ngapi.client.tasks.tasks.update({\n  tasklist: taskListId,\n  task: taskId,\n  resource: {\n    status: 'completed'\n  }\n});"
        },
        "key_methods": [
          "tasklists.list",
          "tasklists.insert",
          "tasks.list",
          "tasks.insert",
          "tasks.update",
          "tasks.delete"
        ]
      },
      {
        "name": "Google People API",
        "service": "people",
        "description": "Access Google Contacts and profile information. Manage contacts and read user profiles.",
        "authentication": {
          "method": "OAuth 2.0",
          "scopes": [
            "https://www.googleapis.com/auth/contacts.readonly",
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/userinfo.profile"
          ],
          "notes": "Contacts scope for managing contacts, profile scope for user info."
        },
        "common_use_cases": [
          "Contact management",
          "Email autocomplete",
          "Contact sync",
          "Profile information",
          "Directory access"
        ],
        "code_example": {
          "description": "List contacts and get user profile",
          "code": "// Get user's own profile\ngapi.client.people.people.get({\n  resourceName: 'people/me',\n  personFields: 'names,emailAddresses,photos'\n}).then(response => {\n  const profile = response.result;\n  console.log('Name:', profile.names[0].displayName);\n  console.log('Email:', profile.emailAddresses[0].value);\n});\n\n// List contacts\ngapi.client.people.people.connections.list({\n  resourceName: 'people/me',\n  pageSize: 10,\n  personFields: 'names,emailAddresses,phoneNumbers'\n}).then(response => {\n  const connections = response.result.connections;\n  connections.forEach(person => {\n    const name = person.names && person.names[0].displayName;\n    const email = person.emailAddresses && person.emailAddresses[0].value;\n    console.log(`${name} - ${email}`);\n  });\n});\n\n// Create a contact\nconst contact = {\n  names: [{givenName: 'John', familyName: 'Doe'}],\n  emailAddresses: [{value: 'john.doe@example.com'}],\n  phoneNumbers: [{value: '+1-555-0123'}]\n};\n\ngapi.client.people.people.createContact({\n  resource: contact\n}).then(response => {\n  console.log('Contact created:', response.result.resourceName);\n});"
        },
        "key_methods": [
          "people.get",
          "people.connections.list",
          "people.createContact",
          "people.updateContact",
          "people.deleteContact"
        ]
      },
      {
        "name": "Google Chat API",
        "service": "chat",
        "description": "Build Chat apps and integrate with Google Chat. Send messages, create bots, and manage spaces.",
        "authentication": {
          "method": "OAuth 2.0 or Service Account",
          "scopes": [
            "https://www.googleapis.com/auth/chat.messages",
            "https://www.googleapis.com/auth/chat.spaces.readonly",
            "https://www.googleapis.com/auth/chat.memberships"
          ],
          "notes": "Service account for bot authentication, OAuth for user actions."
        },
        "common_use_cases": [
          "Chat bots",
          "Notifications",
          "Team communication",
          "Automated messages",
          "Workflow integration"
        ],
        "code_example": {
          "description": "Send message to Chat space",
          "code": "// Send a message to a space\nconst message = {\n  text: 'Hello from my extension!',\n  cards: [\n    {\n      header: {\n        title: 'Extension Update',\n        subtitle: 'New feature available'\n      },\n      sections: [\n        {\n          widgets: [\n            {\n              textParagraph: {\n                text: 'Check out the new dashboard feature!'\n              }\n            },\n            {\n              buttons: [\n                {\n                  textButton: {\n                    text: 'VIEW DETAILS',\n                    onClick: {\n                      openLink: {\n                        url: 'https://example.com'\n                      }\n                    }\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n};\n\ngapi.client.chat.spaces.messages.create({\n  parent: spaceName,\n  resource: message\n}).then(response => {\n  console.log('Message sent:', response.result.name);\n});\n\n// List spaces\ngapi.client.chat.spaces.list().then(response => {\n  const spaces = response.result.spaces;\n  spaces.forEach(space => {\n    console.log('Space:', space.displayName);\n  });\n});"
        },
        "key_methods": [
          "spaces.messages.create",
          "spaces.list",
          "spaces.get",
          "spaces.members.list"
        ]
      },
      {
        "name": "Google Admin SDK",
        "service": "admin",
        "description": "Manage Google Workspace domains and users. Admin-level access for user management, groups, and settings.",
        "authentication": {
          "method": "OAuth 2.0 with Admin privileges",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "notes": "Requires domain admin privileges. Use with caution."
        },
        "common_use_cases": [
          "User provisioning",
          "Group management",
          "Domain administration",
          "Organization units",
          "Security settings"
        ],
        "code_example": {
          "description": "List domain users and create group",
          "code": "// List users in domain\ngapi.client.directory.users.list({\n  customer: 'my_customer',\n  maxResults: 10,\n  orderBy: 'email'\n}).then(response => {\n  const users = response.result.users;\n  users.forEach(user => {\n    console.log(`${user.name.fullName} - ${user.primaryEmail}`);\n  });\n});\n\n// Create a new group\nconst group = {\n  email: 'team@example.com',\n  name: 'Engineering Team',\n  description: 'Development team members'\n};\n\ngapi.client.directory.groups.insert({\n  resource: group\n}).then(response => {\n  console.log('Group created:', response.result.id);\n});\n\n// Add member to group\ngapi.client.directory.members.insert({\n  groupKey: 'team@example.com',\n  resource: {\n    email: 'user@example.com',\n    role: 'MEMBER'\n  }\n});"
        },
        "key_methods": [
          "users.list",
          "users.get",
          "users.insert",
          "groups.list",
          "groups.insert",
          "members.insert"
        ]
      }
    ],
    "authentication_guide": {
      "setup_instructions_markdown": "## 🔐 Google Workspace Authentication Setup\n\nThis extension uses Google Workspace APIs and requires OAuth 2.0 authentication. Follow these steps:\n\n### Step 1: Create Google Cloud Project\n1. Go to [Google Cloud Console](https://console.cloud.google.com)\n2. Click **Create Project** or select existing project\n3. Name your project (e.g., \"My Chrome Extension\")\n\n### Step 2: Enable Required APIs\n1. In your Google Cloud project, go to **APIs & Services > Library**\n2. Search for and enable the APIs you need:\n   - Gmail API (if using Gmail)\n   - Google Drive API (if using Drive)\n   - Google Calendar API (if using Calendar)\n   - Other APIs as needed\n\n### Step 3: Create OAuth 2.0 Credentials\n1. Go to **APIs & Services > Credentials**\n2. Click **Create Credentials > OAuth client ID**\n3. If prompted, configure the OAuth consent screen:\n   - User Type: **External** (unless you have Workspace)\n   - App name: Your extension name\n   - User support email: Your email\n   - Developer contact: Your email\n   - Scopes: Add the scopes your extension needs\n4. For Application type, select **Chrome Extension**\n5. In **Item ID**, enter your extension ID:\n   - Load your extension in Chrome (unpacked)\n   - Copy the extension ID from `chrome://extensions`\n   - Paste it in the Item ID field\n6. Click **Create**\n7. **Copy the Client ID** (looks like: `abc123.apps.googleusercontent.com`)\n\n### Step 4: Update Extension\n1. Open `manifest.json` in your extension folder\n2. Find the `oauth2` section\n3. Replace `YOUR_CLIENT_ID.apps.googleusercontent.com` with your actual Client ID\n4. Save the file\n5. Reload the extension in Chrome\n\n### Step 5: Test Authentication\n1. Click the extension icon\n2. Click \"Sign in\" or authentication button\n3. You should see Google's OAuth consent screen\n4. Grant the requested permissions\n5. Extension should now work!\n\n### Troubleshooting\n\n**Error: \"OAuth2 request failed: OAuth2 client ID is invalid\"**\n- Make sure you replaced `YOUR_CLIENT_ID` with your actual client ID\n- Check that the extension ID in Google Cloud matches your loaded extension\n\n**Error: \"Access blocked: Authorization Error\"**\n- Make sure you enabled the required APIs in Google Cloud Console\n- Check that your OAuth consent screen is configured\n- For testing, you can add yourself as a test user\n\n**Error: \"Required scopes not granted\"**\n- Make sure the scopes in manifest.json match what's in your OAuth consent screen\n- Try removing and re-granting permissions\n\n**Extension works in unpacked mode but not after publishing:**\n- Update the OAuth client ID in Google Cloud Console\n- Add the published extension ID (different from unpacked ID)\n- Wait a few minutes for changes to propagate\n\n### Security Notes\n- Never share your OAuth client secret (Chrome extensions only use client ID)\n- Request only the minimum scopes needed\n- Users will see what permissions you're requesting\n- Tokens are securely managed by Chrome\n\n### For Development\n- You can use the same Client ID for development and testing\n- Add test users in Google Cloud Console OAuth consent screen\n- Published extensions need their own OAuth client configuration",
      "chrome_extension_setup": {
        "manifest_permissions": [
          "identity",
          "https://www.googleapis.com/*"
        ],
        "oauth2_config": {
          "manifest_v3_example": {
            "oauth2": {
              "client_id": "YOUR_CLIENT_ID.apps.googleusercontent.com",
              "scopes": [
                "https://www.googleapis.com/auth/gmail.readonly",
                "https://www.googleapis.com/auth/drive.file"
              ]
            },
            "permissions": [
              "identity"
            ],
            "host_permissions": [
              "https://www.googleapis.com/*"
            ]
          }
        },
        "authentication_code_with_error_handling": "// Google Workspace Authentication with proper error handling\nasync function authenticateGoogleWorkspace() {\n  return new Promise((resolve, reject) => {\n    chrome.identity.getAuthToken({interactive: true}, (token) => {\n      if (chrome.runtime.lastError) {\n        const error = chrome.runtime.lastError.message;\n        \n        // Handle specific error cases\n        if (error.includes('OAuth2 client ID')) {\n          reject(new Error('⚠️ Setup Required: Please configure your OAuth Client ID in manifest.json. See setup instructions.'));\n        } else if (error.includes('User did not approve')) {\n          reject(new Error('Authentication cancelled by user'));\n        } else {\n          reject(new Error(`Authentication failed: ${error}`));\n        }\n        return;\n      }\n      \n      if (!token) {\n        reject(new Error('No authentication token received'));\n        return;\n      }\n      \n      resolve(token);\n    });\n  });\n}\n\n// Usage example with full error handling\nasync function fetchGmailMessages() {\n  try {\n    // Get authentication token\n    const token = await authenticateGoogleWorkspace();\n    \n    // Make API request\n    const response = await fetch('https://www.googleapis.com/gmail/v1/users/me/messages?maxResults=10', {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    \n    if (!response.ok) {\n      if (response.status === 401) {\n        // Token expired, clear cache and retry\n        chrome.identity.removeCachedAuthToken({token: token}, async () => {\n          // Retry authentication\n          const newToken = await authenticateGoogleWorkspace();\n          // Retry API call with new token\n        });\n      }\n      throw new Error(`API request failed: ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    return data.messages || [];\n    \n  } catch (error) {\n    console.error('Error fetching Gmail messages:', error);\n    // Show user-friendly error message\n    displayError(error.message);\n    throw error;\n  }\n}\n\n// Sign out function\nfunction signOutGoogle() {\n  chrome.identity.getAuthToken({interactive: false}, (token) => {\n    if (token) {\n      chrome.identity.removeCachedAuthToken({token: token}, () => {\n        // Revoke token on Google's end\n        fetch(`https://accounts.google.com/o/oauth2/revoke?token=${token}`);\n        console.log('Signed out successfully');\n      });\n    }\n  });\n}",
        "authentication_code": "// Get OAuth token\nchrome.identity.getAuthToken({interactive: true}, (token) => {\n  if (chrome.runtime.lastError) {\n    console.error(chrome.runtime.lastError);\n    return;\n  }\n  \n  // Use token for API requests\n  fetch('https://www.googleapis.com/gmail/v1/users/me/messages', {\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  }).then(response => response.json())\n    .then(data => console.log(data));\n});\n\n// Remove cached token (for logout)\nchrome.identity.removeCachedAuthToken({token: token}, () => {\n  console.log('Token removed');\n});"
      },
      "google_cloud_console_setup": [
        "1. Go to Google Cloud Console (console.cloud.google.com)",
        "2. Create a new project or select existing",
        "3. Enable required Google Workspace APIs",
        "4. Go to Credentials > Create Credentials > OAuth 2.0 Client ID",
        "5. Select 'Chrome Extension' as application type",
        "6. Add your extension ID",
        "7. Copy the Client ID to your manifest.json"
      ],
      "best_practices": [
        "Request minimal scopes needed for functionality",
        "Handle authentication errors gracefully",
        "Cache tokens appropriately",
        "Provide clear user consent messaging",
        "Implement token refresh logic",
        "Store sensitive data securely using chrome.storage"
      ]
    },
    "common_patterns": {
      "batch_operations": {
        "description": "Process multiple API requests efficiently",
        "example": "// Batch multiple API calls\nconst batch = gapi.client.newBatch();\nbatch.add(gapi.client.gmail.users.messages.get({userId: 'me', id: id1}));\nbatch.add(gapi.client.gmail.users.messages.get({userId: 'me', id: id2}));\nbatch.execute(responses => {\n  Object.values(responses).forEach(response => {\n    console.log(response.result);\n  });\n});"
      },
      "pagination": {
        "description": "Handle large result sets with pagination",
        "example": "async function getAllEmails() {\n  let allMessages = [];\n  let pageToken = null;\n  \n  do {\n    const response = await gapi.client.gmail.users.messages.list({\n      userId: 'me',\n      maxResults: 100,\n      pageToken: pageToken\n    });\n    \n    allMessages = allMessages.concat(response.result.messages || []);\n    pageToken = response.result.nextPageToken;\n  } while (pageToken);\n  \n  return allMessages;\n}"
      },
      "error_handling": {
        "description": "Properly handle API errors and rate limits",
        "example": "async function makeApiCall() {\n  try {\n    const response = await gapi.client.gmail.users.messages.list({\n      userId: 'me'\n    });\n    return response.result;\n  } catch (error) {\n    if (error.status === 401) {\n      // Refresh token\n      await refreshAuthToken();\n      return makeApiCall(); // Retry\n    } else if (error.status === 429) {\n      // Rate limit - wait and retry\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      return makeApiCall();\n    } else {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}"
      }
    }
  }
}

