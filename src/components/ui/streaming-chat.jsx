"use client"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Send, Loader2 } from "lucide-react"
import { REQUEST_TYPES } from "@/lib/prompts/old-prompts"
import ModalUrlPrompt from "@/components/ui/modals/modal-url-prompt"

export default function StreamingChat({ 
  projectId, 
  autoGeneratePrompt, 
  onAutoGenerateComplete, 
  onCodeGenerated, 
  onGenerationStart, 
  onGenerationEnd, 
  isProjectReady 
}) {
  const [inputMessage, setInputMessage] = useState("")
  const [messages, setMessages] = useState([
    {
      role: "assistant",
      content: "hi! i'm **chromie**, your chrome extension assistant. tell me what you'd like in your extension.",
    },
  ])
  const [isGenerating, setIsGenerating] = useState(false)
  const [hasGeneratedCode, setHasGeneratedCode] = useState(false)
  const [streamingMessage, setStreamingMessage] = useState(null)
  const [currentThinking, setCurrentThinking] = useState("")
  const [currentCode, setCurrentCode] = useState("")
  const [urlPromptData, setUrlPromptData] = useState(null)
  const [showUrlPrompt, setShowUrlPrompt] = useState(false)
  const messagesEndRef = useRef(null)
  const thinkingBufferRef = useRef("")
  const codeBufferRef = useRef("")
  const bufferTimeoutRef = useRef(null)
  const autoGeneratedRef = useRef(false)
  const currentRequestRef = useRef(null)
  const finalMessageAddedRef = useRef(false)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  // Debug logging
  useEffect(() => {
    console.log('StreamingChat component mounted with props:', { projectId, isProjectReady })
  }, [projectId, isProjectReady])

  // Buffer function is no longer needed since we show summaries instead of raw content

  // Cleanup timeout on unmount
  useEffect(() => {
    return () => {
      if (bufferTimeoutRef.current) {
        clearTimeout(bufferTimeoutRef.current)
      }
    }
  }, [])

  useEffect(() => {
    scrollToBottom()
  }, [messages, streamingMessage, currentThinking, currentCode])

  useEffect(() => {
    if (autoGeneratePrompt && isProjectReady && !hasGeneratedCode && !isGenerating && !autoGeneratedRef.current) {
      console.log('üöÄ Auto-generating with prompt:', autoGeneratePrompt)
      autoGeneratedRef.current = true // Prevent duplicate auto-generation
      setInputMessage(autoGeneratePrompt)
      
      // Add the user message immediately
      const userMessage = {
        role: "user",
        content: autoGeneratePrompt,
      }
      setMessages((prev) => [...prev, userMessage])
      
      // Start the generation process
      startGeneration(autoGeneratePrompt, true) // true indicates this is auto-generation
    }
  }, [autoGeneratePrompt, isProjectReady, hasGeneratedCode, isGenerating])

  const startGeneration = async (prompt, isAutoGeneration = false) => {
    if (isGenerating) return
    
    setIsGenerating(true)
    setStreamingMessage(null)
    setCurrentThinking("")
    setCurrentCode("")
    
    // Reset final message flag
    finalMessageAddedRef.current = false
    
    // Clear any existing timeouts
    if (bufferTimeoutRef.current) {
      clearTimeout(bufferTimeoutRef.current)
    }

    if (onGenerationStart) {
      onGenerationStart()
    }

    try {
      console.log(`üîç hasGeneratedCode: ${hasGeneratedCode}, projectId: ${projectId}`)
      
      // Force refresh hasGeneratedCode from Supabase before determining request type
      let currentHasGeneratedCode = hasGeneratedCode
      if (projectId) {
        try {
          const response = await fetch(`/api/projects/${projectId}/has-generated-code`)
          if (response.ok) {
            const data = await response.json()
            currentHasGeneratedCode = data.hasGeneratedCode
            if (data.hasGeneratedCode !== hasGeneratedCode) {
              console.log(`üîç hasGeneratedCode updated: ${hasGeneratedCode} ‚Üí ${data.hasGeneratedCode}`)
              setHasGeneratedCode(data.hasGeneratedCode)
            }
          }
        } catch (error) {
          console.error('Error refreshing hasGeneratedCode:', error)
        }
      }
      
      const requestType = currentHasGeneratedCode ? REQUEST_TYPES.ADD_TO_EXISTING : REQUEST_TYPES.NEW_EXTENSION
      console.log(`üîÑ Request type: ${requestType}`)

      // Start streaming response
      const response = await fetch("/api/generate/stream", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          prompt: prompt,
          projectId,
          requestType: requestType,
        }),
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const reader = response.body.getReader()
      const decoder = new TextDecoder()
      let buffer = ""

      while (true) {
        const { done, value } = await reader.read()
        if (done) break

        buffer += decoder.decode(value, { stream: true })
        const lines = buffer.split('\n')
        buffer = lines.pop() || ""

        for (const line of lines) {
          if (line.startsWith('data: ')) {
            try {
              const data = JSON.parse(line.slice(6))
              console.log('üì° Stream chunk:', data)

              switch (data.type) {
                case "start":
                  setStreamingMessage({ type: "status", content: "Starting to work on your request" })
                  break
                
                case "analyzing":
                  setStreamingMessage({ type: "status", content: "Analyzing your request to understand what you need" })
                  break
                
                case "analysis_complete":
                  setStreamingMessage({ type: "status", content: `Identified extension type: ${data.content.includes('side_panel') ? 'side panel' : data.content.includes('popup') ? 'popup' : 'content script'}` })
                  break
                
                case "fetching_apis":
                  setStreamingMessage({ type: "status", content: "Looking up required Chrome APIs" })
                  break
                
                case "apis_ready":
                  setStreamingMessage({ type: "status", content: "Chrome API documentation compiled" })
                  break
                
                case "scraping":
                  setStreamingMessage({ type: "status", content: "Analyzing website structure" })
                  break
                
                case "scraping_complete":
                  setStreamingMessage({ type: "status", content: "Website analysis complete" })
                  break
                
                case "scraping_skipped":
                  setStreamingMessage({ type: "status", content: "Skipping website analysis" })
                  break
                
                case "prompt_selected":
                  setStreamingMessage({ type: "status", content: "Selected best approach for extension type" })
                  break
                
                case "context_ready":
                  setStreamingMessage({ type: "status", content: "Context prepared for code generation" })
                  break
                
                case "generation_starting":
                  setStreamingMessage({ type: "status", content: "Starting code generation" })
                  break

                case "thinking":
                  // Show planning status instead of raw content
                  setStreamingMessage({ type: "thinking", content: "Planning the extension architecture" })
                  break

                case "thinking_complete":
                  setStreamingMessage({ type: "thinking_complete", content: "Planning complete, starting code generation" })
                  break

                case "generating_code":
                  setStreamingMessage({ type: "generating_code", content: "Writing extension code" })
                  break

                case "code":
                  // Show code generation status instead of raw content
                  setStreamingMessage({ type: "code", content: "Generating extension files" })
                  break

                case "generation_complete":
                  setStreamingMessage({ type: "generation_complete", content: "Extension generation complete" })
                  break

                case "requires_url":
                  // Handle URL requirement - trigger the URL prompt modal
                  setStreamingMessage({ type: "requires_url", content: "Website URL required for analysis" })
                  
                  // Store the current request info for URL continuation
                  currentRequestRef.current = {
                    prompt: prompt,
                    requestType: requestType,
                    projectId: projectId
                  }
                  
                  // Trigger URL prompt modal
                  setUrlPromptData({
                    data: {
                      requiresUrl: true,
                      message: "This extension would benefit from analyzing specific website structure. Please choose how you'd like to proceed.",
                      detectedSites: [],
                      detectedUrls: [],
                      featureRequest: prompt,
                      requestType: requestType
                    },
                    originalPrompt: prompt
                  })
                  setShowUrlPrompt(true)
                  break

                case "error":
                  setStreamingMessage({ type: "error", content: `Error: ${data.content}` })
                  break

                case "done":
                  // Final completion
                  setStreamingMessage(null)
                  
                  // Add final assistant message only if not already added
                  if (!finalMessageAddedRef.current) {
                    const finalMessage = {
                      role: "assistant",
                      content: "Code generated successfully",
                    }
                    setMessages(prev => [...prev, finalMessage])
                    finalMessageAddedRef.current = true
                  }

                  // Mark that code has been generated
                  if (!hasGeneratedCode) {
                    setHasGeneratedCode(true)
                  }

                  if (onCodeGenerated) {
                    onCodeGenerated({ success: true })
                  }

                  // Call auto-generate complete callback if this was an auto-generation
                  if (autoGeneratePrompt && onAutoGenerateComplete) {
                    onAutoGenerateComplete()
                  }
                  break
              }
            } catch (parseError) {
              console.error('Error parsing stream data:', parseError)
            }
          }
        }
      }

    } catch (error) {
      console.error("Error in streaming generation:", error)
      const errorMessage = {
        role: "assistant",
        content: `Error: ${error.message}`,
      }
      setMessages(prev => [...prev, errorMessage])
      setStreamingMessage({ type: "error", content: error.message })
    } finally {
      setIsGenerating(false)
      setStreamingMessage(null)
      setCurrentThinking("")
      setCurrentCode("")
      
      if (onGenerationEnd) {
        onGenerationEnd()
      }
    }
  }

  const startGenerationWithUrl = async (prompt, userUrl, requestType, projectId) => {
    if (isGenerating) return
    
    setIsGenerating(true)
    setStreamingMessage(null)
    setCurrentThinking("")
    setCurrentCode("")
    
    // Reset final message flag
    finalMessageAddedRef.current = false
    
    // Clear any existing timeouts
    if (bufferTimeoutRef.current) {
      clearTimeout(bufferTimeoutRef.current)
    }

    if (onGenerationStart) {
      onGenerationStart()
    }

    try {
      console.log(`üîÑ Continuing generation with URL: ${userUrl}`)

      // Start streaming response with URL
      const response = await fetch("/api/generate/stream", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          prompt: prompt,
          projectId: projectId,
          requestType: requestType,
          userProvidedUrl: userUrl,
          skipScraping: false
        }),
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const reader = response.body.getReader()
      const decoder = new TextDecoder()
      let buffer = ""

      while (true) {
        const { done, value } = await reader.read()
        if (done) break

        buffer += decoder.decode(value, { stream: true })
        const lines = buffer.split('\n')
        buffer = lines.pop() || ""

        for (const line of lines) {
          if (line.startsWith('data: ')) {
            try {
              const data = JSON.parse(line.slice(6))
              console.log('üì° Stream chunk (with URL):', data)

              switch (data.type) {
                case "start":
                  setStreamingMessage({ type: "status", content: "Continuing with website analysis" })
                  break
                
                case "analyzing":
                  setStreamingMessage({ type: "status", content: "Analyzing your request to understand what you need" })
                  break
                
                case "analysis_complete":
                  setStreamingMessage({ type: "status", content: `Identified extension type: ${data.content.includes('side_panel') ? 'side panel' : data.content.includes('popup') ? 'popup' : 'content script'}` })
                  break
                
                case "fetching_apis":
                  setStreamingMessage({ type: "status", content: "Looking up required Chrome APIs" })
                  break
                
                case "apis_ready":
                  setStreamingMessage({ type: "status", content: "Chrome API documentation compiled" })
                  break
                
                case "scraping":
                  setStreamingMessage({ type: "status", content: "Analyzing website structure" })
                  break
                
                case "scraping_complete":
                  setStreamingMessage({ type: "status", content: "Website analysis complete" })
                  break
                
                case "scraping_skipped":
                  setStreamingMessage({ type: "status", content: "Skipping website analysis" })
                  break
                
                case "prompt_selected":
                  setStreamingMessage({ type: "status", content: "Selected best approach for extension type" })
                  break
                
                case "context_ready":
                  setStreamingMessage({ type: "status", content: "Context prepared for code generation" })
                  break
                
                case "generation_starting":
                  setStreamingMessage({ type: "status", content: "Starting code generation" })
                  break

                case "thinking":
                  // Show planning status instead of raw content
                  setStreamingMessage({ type: "thinking", content: "Planning the extension architecture" })
                  break

                case "thinking_complete":
                  setStreamingMessage({ type: "thinking_complete", content: "Planning complete, starting code generation" })
                  break

                case "generating_code":
                  setStreamingMessage({ type: "generating_code", content: "Writing extension code" })
                  break

                case "code":
                  // Show code generation status instead of raw content
                  setStreamingMessage({ type: "code", content: "Generating extension files" })
                  break

                case "generation_complete":
                  setStreamingMessage({ type: "generation_complete", content: "Extension generation complete" })
                  break

                case "requires_url":
                  // This shouldn't happen again, but handle it gracefully
                  setStreamingMessage({ type: "error", content: "Still need a URL, please try again" })
                  break

                case "error":
                  setStreamingMessage({ type: "error", content: `Error: ${data.content}` })
                  break

                case "done":
                  // Final completion
                  setStreamingMessage(null)
                  
                  // Add final assistant message only if not already added
                  if (!finalMessageAddedRef.current) {
                    const finalMessage = {
                      role: "assistant",
                      content: "Code generated successfully",
                    }
                    setMessages(prev => [...prev, finalMessage])
                    finalMessageAddedRef.current = true
                  }

                  // Mark that code has been generated
                  if (!hasGeneratedCode) {
                    setHasGeneratedCode(true)
                  }

                  if (onCodeGenerated) {
                    onCodeGenerated({ success: true })
                  }

                  // Call auto-generate complete callback if this was an auto-generation
                  if (autoGeneratePrompt && onAutoGenerateComplete) {
                    onAutoGenerateComplete()
                  }
                  break
              }
            } catch (parseError) {
              console.error('Error parsing stream data:', parseError)
            }
          }
        }
      }

    } catch (error) {
      console.error("Error in streaming generation with URL:", error)
      const errorMessage = {
        role: "assistant",
        content: `Error: ${error.message}`,
      }
      setMessages(prev => [...prev, errorMessage])
      setStreamingMessage({ type: "error", content: error.message })
    } finally {
      setIsGenerating(false)
      setStreamingMessage(null)
      setCurrentThinking("")
      setCurrentCode("")
      currentRequestRef.current = null
      
      if (onGenerationEnd) {
        onGenerationEnd()
      }
    }
  }

  const handleSendMessage = async (e) => {
    e.preventDefault()
    if (!inputMessage.trim() || isGenerating) return

    const userMessage = {
      role: "user",
      content: inputMessage,
    }

    setMessages((prev) => [...prev, userMessage])
    const prompt = inputMessage
    setInputMessage("")
    
    // Use the same startGeneration function (false = manual generation)
    await startGeneration(prompt, false)
  }

  const handleUrlSubmit = async (data, userUrl, originalPrompt) => {
    console.log('Continuing generation with URL:', userUrl)
    setShowUrlPrompt(false)
    setUrlPromptData(null)
    
    // Continue generation with the URL using the stored request info
    const requestInfo = currentRequestRef.current
    if (requestInfo) {
      await startGenerationWithUrl(requestInfo.prompt, userUrl, requestInfo.requestType, requestInfo.projectId)
    }
  }

  const handleUrlCancel = () => {
    console.log('URL prompt cancelled')
    setShowUrlPrompt(false)
    setUrlPromptData(null)
    setIsGenerating(false)
    setStreamingMessage(null)
  }

  const renderStreamingMessage = () => {
    if (!streamingMessage) return null

    const getMessageStyle = () => {
      switch (streamingMessage.type) {
        case "status":
          return "text-blue-400 bg-blue-900/20 border-blue-500/30"
        case "thinking":
        case "thinking_complete":
          return "text-yellow-400 bg-yellow-900/20 border-yellow-500/30"
        case "generating_code":
        case "code":
          return "text-green-400 bg-green-900/20 border-green-500/30"
        case "error":
          return "text-red-400 bg-red-900/20 border-red-500/30"
        default:
          return "text-gray-400 bg-gray-900/20 border-gray-500/30"
      }
    }

    const getIcon = () => {
      switch (streamingMessage.type) {
        case "status":
          return "‚Ä¢"
        case "thinking":
        case "thinking_complete":
          return "‚Ä¢"
        case "generating_code":
        case "code":
          return "‚Ä¢"
        case "error":
          return "‚Ä¢"
        default:
          return "‚Ä¢"
      }
    }

    return (
      <div className={`p-3 rounded-lg border ${getMessageStyle()} mb-2`}>
        <div className="flex items-start space-x-2">
          <span className="text-lg">{getIcon()}</span>
          <div className="flex-1">
            <div className="text-sm font-medium mb-1">
              {streamingMessage.type === "thinking" && "Planning"}
              {streamingMessage.type === "thinking_complete" && "Ready to build"}
              {streamingMessage.type === "generating_code" && "Creating extension"}
              {streamingMessage.type === "code" && "Writing code"}
              {streamingMessage.type === "status" && "Processing"}
              {streamingMessage.type === "error" && "Error"}
              {streamingMessage.type === "requires_url" && "URL required"}
              {streamingMessage.type === "generation_complete" && "Complete"}
            </div>
            <div className="text-sm whitespace-pre-wrap leading-relaxed">
              {streamingMessage.content}
              {streamingMessage.type === "thinking" && (
                <span className="inline-block w-2 h-4 bg-yellow-400 ml-1 animate-pulse"></span>
              )}
              {streamingMessage.type === "code" && (
                <span className="inline-block w-2 h-4 bg-green-400 ml-1 animate-pulse"></span>
              )}
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col h-full">
      {/* Chat Header */}
      <div className="p-4 border-b border-white/10">
        <h2 className="text-lg font-semibold text-white">AI Assistant</h2>
        <p className="text-sm text-gray-400">Describe what you want to add or modify</p>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message, index) => (
          <div
            key={index}
            className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}
          >
            <div
              className={`max-w-[80%] p-3 rounded-lg ${
                message.role === "user"
                  ? "bg-gradient-to-r from-purple-500 to-blue-500 text-white"
                  : "bg-slate-700/50 text-gray-200 border border-slate-600"
              }`}
            >
              <div className="whitespace-pre-wrap">{message.content}</div>
            </div>
          </div>
        ))}
        
        {/* Streaming message */}
        {renderStreamingMessage()}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="p-4 border-t border-white/10">
        <form onSubmit={handleSendMessage} className="space-y-3">
          <Textarea
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            placeholder="describe what you want to add or modify..."
            className="min-h-[80px] bg-slate-700/50 border-slate-600 text-white placeholder:text-slate-400 resize-none"
            disabled={isGenerating}
          />
          <Button
            type="submit"
            disabled={!inputMessage.trim() || isGenerating || !projectId}
            className="w-full bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 disabled:opacity-50"
          >
            {isGenerating ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                generating...
              </>
            ) : !projectId ? (
              "setting up project..."
            ) : (
              <>
                <Send className="h-4 w-4 mr-2" />
                send
              </>
            )}
          </Button>
        </form>
      </div>

      {/* URL Prompt Modal */}
      {showUrlPrompt && urlPromptData && (
        <ModalUrlPrompt
          data={urlPromptData.data}
          originalPrompt={urlPromptData.originalPrompt}
          onUrlSubmit={handleUrlSubmit}
          onCancel={handleUrlCancel}
          onCodeGenerated={onCodeGenerated}
          projectId={projectId}
          hasGeneratedCode={hasGeneratedCode}
          onGenerationEnd={onGenerationEnd}
        />
      )}
    </div>
  )
}
