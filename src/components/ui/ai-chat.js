"use client"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Send, Bot, User } from "lucide-react"

export default function AIChat({ projectId, autoGeneratePrompt, onAutoGenerateComplete, onCodeGenerated, onGenerationStart, onGenerationEnd }) {
  const [messages, setMessages] = useState([
    {
      role: "assistant",
      content: "Hi! I'm your Chrome extension assistant. Tell me what you'd like in your extension.",
    },
  ])
  const [inputMessage, setInputMessage] = useState("")
  const [isGenerating, setIsGenerating] = useState(false)
  const [hasGeneratedCode, setHasGeneratedCode] = useState(false)
  const messagesEndRef = useRef(null)
  const autoGeneratedPrompts = useRef(new Set()) // Track prompts that have been auto-generated

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  // Auto-generate when autoGeneratePrompt is provided (from homepage redirect)
  useEffect(() => {
    if (autoGeneratePrompt && projectId && !isGenerating && !autoGeneratedPrompts.current.has(autoGeneratePrompt)) {
      console.log('Auto-generating from homepage prompt:', autoGeneratePrompt)
      
      // Mark this prompt as being processed
      autoGeneratedPrompts.current.add(autoGeneratePrompt)
      
      // Add the user message to chat only once
      const userMessage = { role: "user", content: autoGeneratePrompt }
      replaceOrAddMessage(userMessage)
      
      // Trigger generation automatically
      handleAutoGeneration(autoGeneratePrompt)
      
      // Clear the auto-generate prompt
      if (onAutoGenerateComplete) {
        onAutoGenerateComplete()
      }
    }
  }, [autoGeneratePrompt, projectId])

  const handleSendMessage = async (e) => {
    e.preventDefault()
    if (!inputMessage.trim() || isGenerating) return

    // Check if we have a valid project ID
    if (!projectId) {
      const errorMessage = {
        role: "assistant",
        content: "Please wait while I set up your project, then try again.",
      }
      setMessages((prev) => [...prev, errorMessage])
      return
    }

    const userMessage = { role: "user", content: inputMessage }
    setMessages((prev) => [...prev, userMessage])
    setInputMessage("")
    setIsGenerating(true)

    // Notify parent component that generation started
    if (onGenerationStart) {
      onGenerationStart()
    }

    try {
      console.log("Sending request with type:", hasGeneratedCode ? "add_to_existing" : "new_extension")
      
      // Add "generating code..." message immediately
      const generatingMessage = {
        role: "assistant",
        content: "ðŸš€ Generating code...",
      }
      replaceOrAddMessage(generatingMessage)
      
      const response = await fetch("/api/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          prompt: inputMessage,
          projectId,
          requestType: hasGeneratedCode ? "add_to_existing" : "new_extension",
        }),
      })

      const data = await response.json()

      let content = ""

      // Handle different response scenarios
      if (response.status === 403) {
        content = data.error || "Token usage limit exceeded for your plan. Please upgrade to continue generating extensions."
      } else if (data.requiresUrl) {
        // Show URL prompt modal for scraping
        console.log('URL required for scraping:', data.message);
        
        // Replace "generating code..." with URL request message
        const urlRequestMessage = {
          role: "assistant",
          content: "ðŸ”— I need to analyze the specific webpage structure to build this extension effectively. Please provide the URL of the website you want the extension to work with.",
        }
        
        replaceOrAddMessage(urlRequestMessage, (lastMessage) => 
          lastMessage.content.includes("Generating code")
        )
        
        showUrlPromptModal(data, inputMessage);
        return; // Don't continue with normal flow
      } else if (data.explanation) {
        content = `${data.explanation}`
      } else if (data.error) {
        content = `Error: ${data.error}`
      } else {
        content = "Code generated successfully!"
      }

      const assistantMessage = {
        role: "assistant",
        content,
      }

      // Replace the "generating code..." message with the actual result
      setMessages((prev) => {
        const newMessages = [...prev]
        // Replace the last message (which should be the "generating code..." message)
        if (newMessages.length > 0 && newMessages[newMessages.length - 1].content.includes("Generating code")) {
          newMessages[newMessages.length - 1] = assistantMessage
        } else {
          newMessages.push(assistantMessage)
        }
        return newMessages
      })

      // Mark that code has been generated
      setHasGeneratedCode(true)

      if (onCodeGenerated) {
        onCodeGenerated(data)
      }

      // Refresh token usage display by triggering a page reload of the token usage component
      // This is a simple way to refresh the token usage without complex state management
      const tokenUsageEvent = new CustomEvent('tokenUsageUpdated')
      window.dispatchEvent(tokenUsageEvent)
    } catch (error) {
      console.error("Error generating code:", error)
      const errorMessage = {
        role: "assistant",
        content: "Sorry, I encountered an error while generating your extension. Please try again.",
      }
      
      // Replace the "generating code..." message with the error message
      setMessages((prev) => {
        const newMessages = [...prev]
        // Replace the last message (which should be the "generating code..." message)
        if (newMessages.length > 0 && newMessages[newMessages.length - 1].content.includes("Generating code")) {
          newMessages[newMessages.length - 1] = errorMessage
        } else {
          newMessages.push(errorMessage)
        }
        return newMessages
      })
    } finally {
      setIsGenerating(false)
      // Notify parent component that generation ended
      if (onGenerationEnd) {
        onGenerationEnd()
      }
    }
  }

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage(e)
    }
  }

  // Helper function to replace or add messages without duplicates
  const replaceOrAddMessage = (newMessage, shouldReplace = null) => {
    setMessages((prev) => {
      const newMessages = [...prev]
      
      // Auto-replace logic for "generating code..." messages
      if (!shouldReplace && newMessages.length > 0) {
        const lastMessage = newMessages[newMessages.length - 1]
        // Auto-replace generating messages with results
        if (lastMessage.content.includes("Generating code") && !newMessage.content.includes("Generating code")) {
          newMessages[newMessages.length - 1] = newMessage
          return newMessages
        }
        // Auto-replace generating messages with URL requests
        if (lastMessage.content.includes("Generating code") && newMessage.content.includes("I need to analyze")) {
          newMessages[newMessages.length - 1] = newMessage
          return newMessages
        }
      }
      
      // Check for replacement logic
      if (shouldReplace && newMessages.length > 0) {
        const lastMessage = newMessages[newMessages.length - 1]
        if (shouldReplace(lastMessage)) {
          newMessages[newMessages.length - 1] = newMessage
          return newMessages
        }
      }
      
      // Check for duplicates before adding
      const existingMessage = newMessages.find(msg => 
        msg.role === newMessage.role && 
        msg.content === newMessage.content
      )
      
      if (!existingMessage) {
        newMessages.push(newMessage)
      }
      
      return newMessages
    })
  }

  // Handle auto-generation from homepage redirect
  const handleAutoGeneration = async (prompt) => {
    if (!projectId) {
      const errorMessage = {
        role: "assistant",
        content: "Please wait while I set up your project, then try again.",
      }
      setMessages((prev) => [...prev, errorMessage])
      return
    }

    setIsGenerating(true)

    // Notify parent component that generation started
    if (onGenerationStart) {
      onGenerationStart()
    }

    try {
      console.log("Auto-generating with prompt:", prompt)
      
      // Add "generating code..." message immediately
      const generatingMessage = {
        role: "assistant",
        content: "ðŸš€ Generating code...",
      }
      replaceOrAddMessage(generatingMessage)
      
      const response = await fetch("/api/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          prompt: prompt,
          projectId,
          requestType: hasGeneratedCode ? "add_to_existing" : "new_extension",
        }),
      })

      const data = await response.json()

      let content = ""

      // Handle different response scenarios
      if (response.status === 403) {
        content = data.error || "Token usage limit exceeded for your plan. Please upgrade to continue generating extensions."
      } else if (data.requiresUrl) {
        // Show URL prompt modal for scraping
        console.log('URL required for scraping:', data.message);
        
        // Replace "generating code..." with URL request message
        const urlRequestMessage = {
          role: "assistant",
          content: "ðŸ”— I need to analyze the specific webpage structure to build this extension effectively. Please provide the URL of the website you want the extension to work with.",
        }
        
        setMessages((prev) => {
          const newMessages = [...prev]
          // Replace the last message (which should be the "generating code..." message)
          if (newMessages.length > 0 && newMessages[newMessages.length - 1].content.includes("Generating code")) {
            newMessages[newMessages.length - 1] = urlRequestMessage
          } else {
            newMessages.push(urlRequestMessage)
          }
          return newMessages
        })
        
        showUrlPromptModal(data, prompt);
        return; // Don't continue with normal flow
      } else if (data.explanation) {
        content = `${data.explanation}`
      } else if (data.error) {
        content = `Error: ${data.error}`
      } else {
        content = "Code generated successfully!"
      }

      const assistantMessage = {
        role: "assistant",
        content,
      }

      // Replace the "generating code..." message with the actual result
      setMessages((prev) => {
        const newMessages = [...prev]
        // Replace the last message (which should be the "generating code..." message)
        if (newMessages.length > 0 && newMessages[newMessages.length - 1].content.includes("Generating code")) {
          newMessages[newMessages.length - 1] = assistantMessage
        } else {
          newMessages.push(assistantMessage)
        }
        return newMessages
      })

      // Mark that code has been generated
      setHasGeneratedCode(true)

      if (onCodeGenerated) {
        onCodeGenerated(data)
      }

      // Refresh token usage display
      const tokenUsageEvent = new CustomEvent('tokenUsageUpdated')
      window.dispatchEvent(tokenUsageEvent)
      
    } catch (error) {
      console.error("Error during auto-generation:", error)
      const errorMessage = {
        role: "assistant",
        content: "Sorry, I encountered an error while generating your extension. Please try again.",
      }
      
      // Replace the "generating code..." message with the error message
      setMessages((prev) => {
        const newMessages = [...prev]
        // Replace the last message (which should be the "generating code..." message)
        if (newMessages.length > 0 && newMessages[newMessages.length - 1].content.includes("Generating code")) {
          newMessages[newMessages.length - 1] = errorMessage
        } else {
          newMessages.push(errorMessage)
        }
        return newMessages
      })
    } finally {
      setIsGenerating(false)
      // Notify parent component that generation ended
      if (onGenerationEnd) {
        onGenerationEnd()
      }
    }
  }

  // Show URL prompt modal for scraping
  const showUrlPromptModal = (data, originalPrompt) => {
    console.log('Creating URL prompt modal with data:', data);
    
    // Remove any existing modals first
    const existingModals = document.querySelectorAll('.url-prompt-modal');
    existingModals.forEach(modal => {
      try {
        if (modal.parentNode) {
          modal.parentNode.removeChild(modal);
        }
      } catch (e) {
        console.warn('Could not remove existing modal:', e);
      }
    });
    
    // Create URL prompt modal
    const modal = document.createElement('div');
    modal.className = 'url-prompt-modal';
    modal.id = `url-modal-${Date.now()}`; // Unique ID
    
    modal.innerHTML = `
      <div class="url-prompt-overlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 99999; background: rgba(0, 0, 0, 0.8); display: flex; align-items: center; justify-content: center;">
        <div class="url-prompt-container" style="background: white; border-radius: 12px; padding: 24px; max-width: 500px; width: 90%; color: black;">
          <div class="url-prompt-header">
            <h3 style="font-size: 18px; font-weight: 600; margin-bottom: 8px;">ðŸ”— URL Required for Better Results</h3>
            <p style="color: #666; margin-bottom: 16px; line-height: 1.4;">${data.message}</p>
          </div>
          
          <div class="url-prompt-body">
            ${data.detectedSites && data.detectedSites.length > 0 ? `
              <div class="detected-sites" style="margin-bottom: 16px;">
                <h4 style="font-size: 14px; font-weight: 500; margin-bottom: 8px;">Detected Sites:</h4>
                <div class="site-suggestions" style="display: flex; flex-wrap: wrap; gap: 8px;">
                  ${data.detectedSites.map(site => `
                    <button class="site-suggestion-btn" data-url="https://${site}" style="background: #f3f4f6; border: 1px solid #d1d5db; border-radius: 6px; padding: 8px 12px; font-size: 12px; cursor: pointer; hover:background: #e5e7eb;">
                      ${site}
                    </button>
                  `).join('')}
                </div>
              </div>
            ` : ''}
            
            ${data.detectedUrls && data.detectedUrls.length > 0 ? `
              <div class="detected-urls" style="margin-bottom: 16px;">
                <h4 style="font-size: 14px; font-weight: 500; margin-bottom: 8px;">Detected URLs:</h4>
                <div class="url-suggestions" style="display: flex; flex-wrap: wrap; gap: 8px;">
                  ${data.detectedUrls.map(url => `
                    <button class="url-suggestion-btn" data-url="${url}" style="background: #f3f4f6; border: 1px solid #d1d5db; border-radius: 6px; padding: 8px 12px; font-size: 12px; cursor: pointer; hover:background: #e5e7eb;">
                      ${url}
                    </button>
                  `).join('')}
                </div>
              </div>
            ` : ''}
            
            <div class="url-input-section">
              <label for="userUrl" style="display: block; font-size: 14px; font-weight: 500; margin-bottom: 8px;">or enter a specific url:</label>
              <input type="url" id="userUrl" placeholder="https://example.com" style="width: 100%; padding: 8px 12px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 14px; margin-bottom: 16px;" />
            </div>
          </div>
          
          <div class="url-prompt-actions" style="display: flex; gap: 12px; justify-content: flex-end;">
            <button id="cancelUrlPrompt" style="background: #f3f4f6; border: 1px solid #d1d5db; border-radius: 6px; padding: 8px 16px; font-size: 14px; cursor: pointer;">cancel</button>
            <button id="submitUrl" style="background: #3b82f6; color: white; border: none; border-radius: 6px; padding: 8px 16px; font-size: 14px; cursor: pointer;">continue with url</button>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // Add event listeners
    const urlInput = modal.querySelector('#userUrl');
    const submitBtn = modal.querySelector('#submitUrl');
    const cancelBtn = modal.querySelector('#cancelUrlPrompt');
    
    // Site suggestion buttons
    modal.querySelectorAll('.site-suggestion-btn, .url-suggestion-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        urlInput.value = btn.dataset.url;
        urlInput.focus();
      });
    });
    
    // Submit URL
    submitBtn.addEventListener('click', () => {
      const url = urlInput.value.trim();
      if (!url) {
        alert('Please enter a URL or select a suggested site');
        return;
      }
      
      // Disable button to prevent double-clicks
      submitBtn.disabled = true;
      submitBtn.textContent = 'processing...';
      
      console.log('Removing URL prompt modal and continuing with URL:', url);
      
      // Remove modal immediately with multiple fallback methods
      const removeModal = () => {
        try {
          if (modal && modal.parentNode) {
            document.body.removeChild(modal);
            console.log('âœ… Modal removed successfully');
            return true;
          }
        } catch (error) {
          console.error('Error removing modal:', error);
        }
        
        // Fallback 1: Hide with display none
        try {
          if (modal) {
            modal.style.display = 'none';
            modal.style.visibility = 'hidden';
            modal.style.opacity = '0';
            console.log('âœ… Modal hidden as fallback');
            return true;
          }
        } catch (error) {
          console.error('Error hiding modal:', error);
        }
        
        return false;
      };
      
      // Try to remove immediately
      removeModal();
      
      // Fallback: Try again after a short delay
      setTimeout(() => {
        removeModal();
      }, 100);
      
      // Continue generation with URL
      continueGenerationWithUrl(data, url, originalPrompt);
    });
    
    // Cancel
    cancelBtn.addEventListener('click', () => {
      console.log('Cancelling URL prompt modal');
      
      // Remove modal with error handling
      try {
        if (modal && modal.parentNode) {
          document.body.removeChild(modal);
          console.log('âœ… Modal removed successfully (cancelled)');
        }
      } catch (error) {
        console.error('Error removing modal on cancel:', error);
        // Force removal by setting display none as fallback
        if (modal) {
          modal.style.display = 'none';
        }
      }
      
      const cancelMessage = {
        role: "assistant",
        content: "URL request cancelled. Extension will be generated without specific website analysis.",
      }
      setMessages((prev) => [...prev, cancelMessage])
      setIsGenerating(false)
    });
    
    // Enter key support
    urlInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        submitBtn.click();
      }
    });
    
    // Focus on input
    setTimeout(() => urlInput.focus(), 100);
  }

  // Continue generation with URL
  const continueGenerationWithUrl = async (promptData, userUrl, originalPrompt) => {
    try {
      console.log('Continuing generation with URL:', userUrl);
      
      // Add "generating code..." message immediately
      const generatingMessage = {
        role: "assistant",
        content: "ðŸš€ Generating code with real website data from " + new URL(userUrl).hostname + "...",
      }
      replaceOrAddMessage(generatingMessage)
      
      const response = await fetch("/api/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          prompt: originalPrompt,
          projectId,
          requestType: hasGeneratedCode ? "add_to_existing" : "new_extension",
          userProvidedUrl: userUrl // Add the user-provided URL
        }),
      })

      const data = await response.json()
      
      let content = ""
      if (response.status === 403) {
        content = data.error || "Token usage limit exceeded for your plan. Please upgrade to continue generating extensions."
      } else if (data.explanation) {
        content = `${data.explanation}`
      } else if (data.error) {
        content = `Error: ${data.error}`
      } else {
        content = "Code generated successfully!"
      }

      const assistantMessage = {
        role: "assistant",
        content,
      }

      // Replace the "generating code..." message with the actual result
      setMessages((prev) => {
        const newMessages = [...prev]
        // Replace the last message (which should be the "generating code..." message)
        if (newMessages.length > 0 && newMessages[newMessages.length - 1].content.includes("Generating code with real website data")) {
          newMessages[newMessages.length - 1] = assistantMessage
        } else {
          newMessages.push(assistantMessage)
        }
        return newMessages
      })
      
      // Mark that code has been generated
      setHasGeneratedCode(true)

      if (onCodeGenerated) {
        onCodeGenerated(data)
      }

      // Refresh token usage display
      const tokenUsageEvent = new CustomEvent('tokenUsageUpdated')
      window.dispatchEvent(tokenUsageEvent)
      
    } catch (error) {
      console.error("Error continuing generation with URL:", error)
      const errorMessage = {
        role: "assistant",
        content: "Sorry, I encountered an error while generating your extension with the provided URL. Please try again.",
      }
      
      // Replace the "generating code..." message with the error message
      setMessages((prev) => {
        const newMessages = [...prev]
        // Replace the last message (which should be the "generating code..." message)
        if (newMessages.length > 0 && newMessages[newMessages.length - 1].content.includes("Generating code with real website data")) {
          newMessages[newMessages.length - 1] = errorMessage
        } else {
          newMessages.push(errorMessage)
        }
        return newMessages
      })
    } finally {
      setIsGenerating(false)
      if (onGenerationEnd) {
        onGenerationEnd()
      }
    }
  }

  return (
    <div className="flex flex-col h-full">
      {/* Chat Header */}
      <div className="p-4 border-b border-white/10">
        <h3 className="text-lg font-semibold mb-1 flex items-center">
          <Bot className="h-5 w-5 mr-2 text-purple-400" />
          AI Assistant
        </h3>
        <p className="text-sm text-slate-400">Ask me to modify your extension</p>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-auto p-4 space-y-4">
        {messages.map((message, index) => (
          <div
            key={index}
            className={`flex items-start space-x-3 ${
              message.role === "user" ? "flex-row-reverse space-x-reverse" : ""
            }`}
          >
            <div
              className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                message.role === "user" ? "bg-blue-500" : "bg-purple-500"
              }`}
            >
              {message.role === "user" ? (
                <User className="h-4 w-4 text-white" />
              ) : (
                <Bot className="h-4 w-4 text-white" />
              )}
            </div>
            <div
              className={`max-w-[80%] p-3 rounded-lg ${
                message.role === "user"
                  ? "bg-blue-500/10 border border-blue-500/20 text-blue-100"
                  : "bg-slate-700/50 border border-slate-600/50 text-slate-200"
              }`}
            >
              <p className="text-sm whitespace-pre-wrap">{message.content}</p>
            </div>
          </div>
        ))}
        {isGenerating && (
          <div className="flex items-start space-x-3">
            <div className="w-8 h-8 rounded-full bg-purple-500 flex items-center justify-center flex-shrink-0">
              <Bot className="h-4 w-4 text-white" />
            </div>
            <div className="bg-slate-700/50 border border-slate-600/50 p-3 rounded-lg">
              <div className="flex items-center space-x-2">
                <div className="animate-spin rounded-full h-4 w-4 border-2 border-purple-400 border-t-transparent" />
                <span className="text-sm text-slate-300">Generating code...</span>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="p-4 border-t border-white/10">
        <form onSubmit={handleSendMessage} className="space-y-3">
          <Textarea
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Describe what you want to add or modify..."
            className="min-h-[80px] bg-slate-700/50 border-slate-600 text-white placeholder:text-slate-400 resize-none"
            disabled={isGenerating}
          />
          <Button
            type="submit"
            disabled={!inputMessage.trim() || isGenerating || !projectId}
            className="w-full bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 disabled:opacity-50"
          >
            <Send className="h-4 w-4 mr-2" />
            {isGenerating ? "Generating..." : !projectId ? "Setting up project..." : "Send"}
          </Button>
        </form>
      </div>
    </div>
  )
}
